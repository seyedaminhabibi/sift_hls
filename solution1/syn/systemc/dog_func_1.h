// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _dog_func_1_HH_
#define _dog_func_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct dog_func_1 : public sc_module {
    // Port declarations 23
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_logic > in_V_ap_vld;
    sc_in< sc_logic > ap_ce;
    sc_in< sc_lv<10> > delay_wp_V_read;
    sc_in< sc_lv<10> > delay_rp_V_read;
    sc_out< sc_lv<12> > delay_buffer_V_address0;
    sc_out< sc_logic > delay_buffer_V_ce0;
    sc_in< sc_lv<8> > delay_buffer_V_q0;
    sc_out< sc_lv<12> > delay_buffer_V_address1;
    sc_out< sc_logic > delay_buffer_V_ce1;
    sc_out< sc_logic > delay_buffer_V_we1;
    sc_out< sc_lv<8> > delay_buffer_V_d1;
    sc_in< sc_lv<3> > tmp_5;
    sc_in< sc_lv<8> > in_V;
    sc_out< sc_lv<8> > ap_return_0;
    sc_out< sc_lv<10> > ap_return_1;
    sc_out< sc_lv<10> > ap_return_2;
    sc_out< sc_logic > in_V_blk_n;


    // Module declarations
    dog_func_1(sc_module_name name);
    SC_HAS_PROCESS(dog_func_1);

    ~dog_func_1();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg0_fsm_0;
    sc_signal< bool > ap_sig_18;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it0;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it1;
    sc_signal< bool > ap_sig_37;
    sc_signal< sc_lv<10> > delay_rp_V_read_1_reg_146;
    sc_signal< sc_lv<10> > delay_wp_V_read_1_reg_151;
    sc_signal< sc_lv<64> > tmp_3_fu_100_p1;
    sc_signal< sc_lv<64> > tmp_6_fu_113_p1;
    sc_signal< sc_lv<13> > tmp_2_fu_92_p3;
    sc_signal< sc_lv<13> > tmp_4_fu_105_p3;
    sc_signal< sc_lv<10> > delay_wp_V_write_assign_fu_118_p2;
    sc_signal< sc_lv<10> > delay_rp_V_write_assign_fu_123_p2;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_sig_pprstidle_pp0;
    sc_signal< sc_logic > ap_sig_pprststart_0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_pp0_stg0_fsm_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<10> ap_const_lv10_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_reg_ppiten_pp0_it0();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_2();
    void thread_ap_sig_18();
    void thread_ap_sig_37();
    void thread_ap_sig_cseq_ST_pp0_stg0_fsm_0();
    void thread_ap_sig_pprstidle_pp0();
    void thread_ap_sig_pprststart_0();
    void thread_delay_buffer_V_address0();
    void thread_delay_buffer_V_address1();
    void thread_delay_buffer_V_ce0();
    void thread_delay_buffer_V_ce1();
    void thread_delay_buffer_V_d1();
    void thread_delay_buffer_V_we1();
    void thread_delay_rp_V_write_assign_fu_123_p2();
    void thread_delay_wp_V_write_assign_fu_118_p2();
    void thread_in_V_blk_n();
    void thread_tmp_2_fu_92_p3();
    void thread_tmp_3_fu_100_p1();
    void thread_tmp_4_fu_105_p3();
    void thread_tmp_6_fu_113_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
