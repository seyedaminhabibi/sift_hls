-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dog_func_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_V_ap_vld : IN STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    delay_wp_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    delay_rp_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    delay_buffer_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    delay_buffer_V_ce0 : OUT STD_LOGIC;
    delay_buffer_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    delay_buffer_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    delay_buffer_V_ce1 : OUT STD_LOGIC;
    delay_buffer_V_we1 : OUT STD_LOGIC;
    delay_buffer_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tmp_5 : IN STD_LOGIC_VECTOR (2 downto 0);
    in_V : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (9 downto 0);
    in_V_blk_n : OUT STD_LOGIC );
end;


architecture behav of dog_func_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_pp0_stg0_fsm_0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_pp0_stg0_fsm_0 : STD_LOGIC;
    signal ap_sig_18 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_sig_37 : BOOLEAN;
    signal delay_rp_V_read_1_reg_146 : STD_LOGIC_VECTOR (9 downto 0);
    signal delay_wp_V_read_1_reg_151 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_100_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_113_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_92_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_4_fu_105_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal delay_wp_V_write_assign_fu_118_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal delay_rp_V_write_assign_fu_123_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_pprstidle_pp0 : STD_LOGIC;
    signal ap_sig_pprststart_0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_pp0_stg0_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_37) or not((ap_const_logic_1 = ap_ce)))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_37)) and (ap_const_logic_1 = ap_ce))) then
                delay_rp_V_read_1_reg_146 <= delay_rp_V_read;
                delay_wp_V_read_1_reg_151 <= delay_wp_V_read;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_sig_37, ap_ce, ap_sig_pprstidle_pp0, ap_sig_pprststart_0)
    begin
        case ap_CS_fsm is
            when ap_ST_pp0_stg0_fsm_0 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_37, ap_ce)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_37)) and (ap_const_logic_1 = ap_ce)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_sig_37, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_37)) and (ap_const_logic_1 = ap_ce))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_reg_ppiten_pp0_it0 <= ap_start;
    ap_return_0 <= delay_buffer_V_q0;
    ap_return_1 <= delay_wp_V_write_assign_fu_118_p2;
    ap_return_2 <= delay_rp_V_write_assign_fu_123_p2;

    ap_sig_18_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_18 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_37_assign_proc : process(ap_start, in_V_ap_vld)
    begin
                ap_sig_37 <= ((in_V_ap_vld = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;


    ap_sig_cseq_ST_pp0_stg0_fsm_0_assign_proc : process(ap_sig_18)
    begin
        if (ap_sig_18) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_pprstidle_pp0_assign_proc : process(ap_start, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it0))) then 
            ap_sig_pprstidle_pp0 <= ap_const_logic_1;
        else 
            ap_sig_pprstidle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_pprststart_0_assign_proc : process(ap_start, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_0 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_start))) then 
            ap_sig_pprststart_0 <= ap_const_logic_1;
        else 
            ap_sig_pprststart_0 <= ap_const_logic_0;
        end if; 
    end process;

    delay_buffer_V_address0 <= tmp_6_fu_113_p1(12 - 1 downto 0);
    delay_buffer_V_address1 <= tmp_3_fu_100_p1(12 - 1 downto 0);

    delay_buffer_V_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_sig_37, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_37)) and (ap_const_logic_1 = ap_ce))) then 
            delay_buffer_V_ce0 <= ap_const_logic_1;
        else 
            delay_buffer_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_buffer_V_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_sig_37, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_37)) and (ap_const_logic_1 = ap_ce))) then 
            delay_buffer_V_ce1 <= ap_const_logic_1;
        else 
            delay_buffer_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    delay_buffer_V_d1 <= in_V;

    delay_buffer_V_we1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_sig_37, ap_ce)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_37)) and (ap_const_logic_1 = ap_ce)))) then 
            delay_buffer_V_we1 <= ap_const_logic_1;
        else 
            delay_buffer_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    delay_rp_V_write_assign_fu_123_p2 <= std_logic_vector(unsigned(delay_rp_V_read_1_reg_146) + unsigned(ap_const_lv10_1));
    delay_wp_V_write_assign_fu_118_p2 <= std_logic_vector(unsigned(delay_wp_V_read_1_reg_151) + unsigned(ap_const_lv10_1));

    in_V_blk_n_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, in_V_ap_vld)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_start = ap_const_logic_0)))) then 
            in_V_blk_n <= in_V_ap_vld;
        else 
            in_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    tmp_2_fu_92_p3 <= (tmp_5 & delay_wp_V_read);
    tmp_3_fu_100_p1 <= std_logic_vector(resize(unsigned(tmp_2_fu_92_p3),64));
    tmp_4_fu_105_p3 <= (tmp_5 & delay_rp_V_read);
    tmp_6_fu_113_p1 <= std_logic_vector(resize(unsigned(tmp_4_fu_105_p3),64));
end behav;
