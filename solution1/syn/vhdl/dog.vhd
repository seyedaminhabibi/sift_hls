-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dog is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_V : IN STD_LOGIC_VECTOR (7 downto 0);
    out_data_V : OUT STD_LOGIC_VECTOR (23 downto 0);
    out_data_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of dog is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dog,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xq7z020cl400-1q,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.100000,HLS_SYN_LAT=601,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=286,HLS_SYN_LUT=213}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv10_3F8 : STD_LOGIC_VECTOR (9 downto 0) := "1111111000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_27 : BOOLEAN;
    signal tmp_9_fu_170_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_reg_460 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_49 : BOOLEAN;
    signal i_V_fu_318_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_V_reg_513 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_58 : BOOLEAN;
    signal j_V_fu_330_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_V_reg_521 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_67 : BOOLEAN;
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_76 : BOOLEAN;
    signal line_delays_buffer_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_delay_outs_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_delay_outs_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_dog_func_fu_157_ap_start : STD_LOGIC;
    signal grp_dog_func_fu_157_ap_done : STD_LOGIC;
    signal grp_dog_func_fu_157_ap_idle : STD_LOGIC;
    signal grp_dog_func_fu_157_ap_ready : STD_LOGIC;
    signal grp_dog_func_fu_157_line_buffer_delays_buffer_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dog_func_fu_157_line_buffer_delays_buffer_V_ce0 : STD_LOGIC;
    signal grp_dog_func_fu_157_line_buffer_delays_buffer_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dog_func_fu_157_line_buffer_delays_buffer_V_ce1 : STD_LOGIC;
    signal grp_dog_func_fu_157_line_buffer_delays_buffer_V_we1 : STD_LOGIC;
    signal grp_dog_func_fu_157_line_buffer_delays_buffer_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_dog_func_fu_157_line_buffer_delay_outs_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dog_func_fu_157_line_buffer_delay_outs_V_ce0 : STD_LOGIC;
    signal grp_dog_func_fu_157_line_buffer_delay_outs_V_we0 : STD_LOGIC;
    signal grp_dog_func_fu_157_line_buffer_delay_outs_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_dog_func_fu_157_line_buffer_delay_outs_V_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dog_func_fu_157_line_buffer_delay_outs_V_ce1 : STD_LOGIC;
    signal grp_dog_func_fu_157_line_buffer_delay_outs_V_we1 : STD_LOGIC;
    signal grp_dog_func_fu_157_line_buffer_delay_outs_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_dog_func_fu_157_ap_return_0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_dog_func_fu_157_ap_return_1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_dog_func_fu_157_ap_return_2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_dog_func_fu_157_ap_return_3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_dog_func_fu_157_ap_return_4 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_dog_func_fu_157_ap_return_5 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_dog_func_fu_157_ap_return_6 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dog_func_fu_157_in_V_blk_n : STD_LOGIC;
    signal tmp_phi_fu_127_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_reg_123 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_162 : BOOLEAN;
    signal tmp_1_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_reg_135 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_1_reg_146 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_184 : BOOLEAN;
    signal exitcond1_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_grp_dog_func_fu_157_ap_start : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_nseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_196 : BOOLEAN;
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_204 : BOOLEAN;
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_211 : BOOLEAN;
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_219 : BOOLEAN;
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_228 : BOOLEAN;
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_236 : BOOLEAN;
    signal line_delays_rp_V_fu_54 : STD_LOGIC_VECTOR (9 downto 0);
    signal line_delays_rp_V_0_1_fu_253_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal line_delays_rp_V_1_fu_58 : STD_LOGIC_VECTOR (9 downto 0);
    signal line_delays_rp_V_1_1_fu_245_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal line_delays_rp_V_2_fu_62 : STD_LOGIC_VECTOR (9 downto 0);
    signal line_delays_rp_V_2_1_fu_229_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal line_delays_wp_V_fu_66 : STD_LOGIC_VECTOR (9 downto 0);
    signal line_delays_wp_V_1_fu_70 : STD_LOGIC_VECTOR (9 downto 0);
    signal line_delays_wp_V_2_fu_74 : STD_LOGIC_VECTOR (9 downto 0);
    signal line_delays_0_wp_V_1_fu_86 : STD_LOGIC_VECTOR (9 downto 0);
    signal line_delays_1_wp_V_1_fu_90 : STD_LOGIC_VECTOR (9 downto 0);
    signal line_delays_2_wp_V_1_fu_94 : STD_LOGIC_VECTOR (9 downto 0);
    signal line_delays_0_rp_V_1_fu_98 : STD_LOGIC_VECTOR (9 downto 0);
    signal line_delays_1_rp_V_1_fu_102 : STD_LOGIC_VECTOR (9 downto 0);
    signal line_delays_2_rp_V_1_fu_106 : STD_LOGIC_VECTOR (9 downto 0);
    signal sel_tmp_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_215_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sel_tmp5_fu_237_p3 : STD_LOGIC_VECTOR (9 downto 0);

    component dog_func IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_V_ap_vld : IN STD_LOGIC;
        line_buffer_delays_0_wp_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
        line_buffer_delays_1_wp_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
        line_buffer_delays_2_wp_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
        line_buffer_delays_0_rp_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
        line_buffer_delays_1_rp_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
        line_buffer_delays_2_rp_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
        line_buffer_delays_buffer_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        line_buffer_delays_buffer_V_ce0 : OUT STD_LOGIC;
        line_buffer_delays_buffer_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        line_buffer_delays_buffer_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        line_buffer_delays_buffer_V_ce1 : OUT STD_LOGIC;
        line_buffer_delays_buffer_V_we1 : OUT STD_LOGIC;
        line_buffer_delays_buffer_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        line_buffer_delay_outs_V_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        line_buffer_delay_outs_V_ce0 : OUT STD_LOGIC;
        line_buffer_delay_outs_V_we0 : OUT STD_LOGIC;
        line_buffer_delay_outs_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        line_buffer_delay_outs_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        line_buffer_delay_outs_V_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
        line_buffer_delay_outs_V_ce1 : OUT STD_LOGIC;
        line_buffer_delay_outs_V_we1 : OUT STD_LOGIC;
        line_buffer_delay_outs_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        line_buffer_delay_outs_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        in_V : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (23 downto 0);
        in_V_blk_n : OUT STD_LOGIC );
    end component;


    component dog_line_delays_buffer_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component dog_line_delay_outs_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    line_delays_buffer_V_U : component dog_line_delays_buffer_V
    generic map (
        DataWidth => 8,
        AddressRange => 3072,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_dog_func_fu_157_line_buffer_delays_buffer_V_address0,
        ce0 => grp_dog_func_fu_157_line_buffer_delays_buffer_V_ce0,
        q0 => line_delays_buffer_V_q0,
        address1 => grp_dog_func_fu_157_line_buffer_delays_buffer_V_address1,
        ce1 => grp_dog_func_fu_157_line_buffer_delays_buffer_V_ce1,
        we1 => grp_dog_func_fu_157_line_buffer_delays_buffer_V_we1,
        d1 => grp_dog_func_fu_157_line_buffer_delays_buffer_V_d1);

    line_delay_outs_V_U : component dog_line_delay_outs_V
    generic map (
        DataWidth => 8,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_dog_func_fu_157_line_buffer_delay_outs_V_address0,
        ce0 => grp_dog_func_fu_157_line_buffer_delay_outs_V_ce0,
        we0 => grp_dog_func_fu_157_line_buffer_delay_outs_V_we0,
        d0 => grp_dog_func_fu_157_line_buffer_delay_outs_V_d0,
        q0 => line_delay_outs_V_q0,
        address1 => grp_dog_func_fu_157_line_buffer_delay_outs_V_address1,
        ce1 => grp_dog_func_fu_157_line_buffer_delay_outs_V_ce1,
        we1 => grp_dog_func_fu_157_line_buffer_delay_outs_V_we1,
        d1 => grp_dog_func_fu_157_line_buffer_delay_outs_V_d1,
        q1 => line_delay_outs_V_q1);

    grp_dog_func_fu_157 : component dog_func
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dog_func_fu_157_ap_start,
        ap_done => grp_dog_func_fu_157_ap_done,
        ap_idle => grp_dog_func_fu_157_ap_idle,
        ap_ready => grp_dog_func_fu_157_ap_ready,
        in_V_ap_vld => ap_const_logic_1,
        line_buffer_delays_0_wp_V_read => line_delays_0_wp_V_1_fu_86,
        line_buffer_delays_1_wp_V_read => line_delays_1_wp_V_1_fu_90,
        line_buffer_delays_2_wp_V_read => line_delays_2_wp_V_1_fu_94,
        line_buffer_delays_0_rp_V_read => line_delays_0_rp_V_1_fu_98,
        line_buffer_delays_1_rp_V_read => line_delays_1_rp_V_1_fu_102,
        line_buffer_delays_2_rp_V_read => line_delays_2_rp_V_1_fu_106,
        line_buffer_delays_buffer_V_address0 => grp_dog_func_fu_157_line_buffer_delays_buffer_V_address0,
        line_buffer_delays_buffer_V_ce0 => grp_dog_func_fu_157_line_buffer_delays_buffer_V_ce0,
        line_buffer_delays_buffer_V_q0 => line_delays_buffer_V_q0,
        line_buffer_delays_buffer_V_address1 => grp_dog_func_fu_157_line_buffer_delays_buffer_V_address1,
        line_buffer_delays_buffer_V_ce1 => grp_dog_func_fu_157_line_buffer_delays_buffer_V_ce1,
        line_buffer_delays_buffer_V_we1 => grp_dog_func_fu_157_line_buffer_delays_buffer_V_we1,
        line_buffer_delays_buffer_V_d1 => grp_dog_func_fu_157_line_buffer_delays_buffer_V_d1,
        line_buffer_delay_outs_V_address0 => grp_dog_func_fu_157_line_buffer_delay_outs_V_address0,
        line_buffer_delay_outs_V_ce0 => grp_dog_func_fu_157_line_buffer_delay_outs_V_ce0,
        line_buffer_delay_outs_V_we0 => grp_dog_func_fu_157_line_buffer_delay_outs_V_we0,
        line_buffer_delay_outs_V_d0 => grp_dog_func_fu_157_line_buffer_delay_outs_V_d0,
        line_buffer_delay_outs_V_q0 => line_delay_outs_V_q0,
        line_buffer_delay_outs_V_address1 => grp_dog_func_fu_157_line_buffer_delay_outs_V_address1,
        line_buffer_delay_outs_V_ce1 => grp_dog_func_fu_157_line_buffer_delay_outs_V_ce1,
        line_buffer_delay_outs_V_we1 => grp_dog_func_fu_157_line_buffer_delay_outs_V_we1,
        line_buffer_delay_outs_V_d1 => grp_dog_func_fu_157_line_buffer_delay_outs_V_d1,
        line_buffer_delay_outs_V_q1 => line_delay_outs_V_q1,
        in_V => in_V,
        ap_return_0 => grp_dog_func_fu_157_ap_return_0,
        ap_return_1 => grp_dog_func_fu_157_ap_return_1,
        ap_return_2 => grp_dog_func_fu_157_ap_return_2,
        ap_return_3 => grp_dog_func_fu_157_ap_return_3,
        ap_return_4 => grp_dog_func_fu_157_ap_return_4,
        ap_return_5 => grp_dog_func_fu_157_ap_return_5,
        ap_return_6 => grp_dog_func_fu_157_ap_return_6,
        in_V_blk_n => grp_dog_func_fu_157_in_V_blk_n);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_dog_func_fu_157_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_dog_func_fu_157_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_logic_1 = ap_sig_nseq_ST_st6_fsm_5))) then 
                    ap_reg_grp_dog_func_fu_157_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_dog_func_fu_157_ap_ready)) then 
                    ap_reg_grp_dog_func_fu_157_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    line_delays_0_rp_V_1_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
                line_delays_0_rp_V_1_fu_98 <= grp_dog_func_fu_157_ap_return_3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((tmp_1_fu_261_p2 = ap_const_lv1_0)))) then 
                line_delays_0_rp_V_1_fu_98 <= line_delays_rp_V_0_1_fu_253_p3;
            end if; 
        end if;
    end process;

    line_delays_0_wp_V_1_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
                line_delays_0_wp_V_1_fu_86 <= grp_dog_func_fu_157_ap_return_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((tmp_1_fu_261_p2 = ap_const_lv1_0)))) then 
                line_delays_0_wp_V_1_fu_86 <= line_delays_wp_V_fu_66;
            end if; 
        end if;
    end process;

    line_delays_1_rp_V_1_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
                line_delays_1_rp_V_1_fu_102 <= grp_dog_func_fu_157_ap_return_4;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((tmp_1_fu_261_p2 = ap_const_lv1_0)))) then 
                line_delays_1_rp_V_1_fu_102 <= line_delays_rp_V_1_1_fu_245_p3;
            end if; 
        end if;
    end process;

    line_delays_1_wp_V_1_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
                line_delays_1_wp_V_1_fu_90 <= grp_dog_func_fu_157_ap_return_1;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((tmp_1_fu_261_p2 = ap_const_lv1_0)))) then 
                line_delays_1_wp_V_1_fu_90 <= line_delays_wp_V_1_fu_70;
            end if; 
        end if;
    end process;

    line_delays_2_rp_V_1_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
                line_delays_2_rp_V_1_fu_106 <= grp_dog_func_fu_157_ap_return_5;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((tmp_1_fu_261_p2 = ap_const_lv1_0)))) then 
                line_delays_2_rp_V_1_fu_106 <= line_delays_rp_V_2_1_fu_229_p3;
            end if; 
        end if;
    end process;

    line_delays_2_wp_V_1_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
                line_delays_2_wp_V_1_fu_94 <= grp_dog_func_fu_157_ap_return_2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((tmp_1_fu_261_p2 = ap_const_lv1_0)))) then 
                line_delays_2_wp_V_1_fu_94 <= line_delays_wp_V_2_fu_74;
            end if; 
        end if;
    end process;

    p_1_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond1_fu_312_p2))) then 
                p_1_reg_146 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
                p_1_reg_146 <= j_V_reg_521;
            end if; 
        end if;
    end process;

    p_s_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond_fu_324_p2)))) then 
                p_s_reg_135 <= i_V_reg_513;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((tmp_1_fu_261_p2 = ap_const_lv1_0)))) then 
                p_s_reg_135 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    tmp_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (tmp_1_fu_261_p2 = ap_const_lv1_0))) then 
                tmp_reg_123 <= tmp_9_reg_460;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                tmp_reg_123 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                i_V_reg_513 <= i_V_fu_318_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                j_V_reg_521 <= j_V_fu_330_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                line_delays_rp_V_1_fu_58 <= line_delays_rp_V_1_1_fu_245_p3;
                line_delays_rp_V_2_fu_62 <= line_delays_rp_V_2_1_fu_229_p3;
                line_delays_rp_V_fu_54 <= line_delays_rp_V_0_1_fu_253_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                tmp_9_reg_460 <= tmp_9_fu_170_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_1_fu_261_p2, exitcond_fu_324_p2, exitcond1_fu_312_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                if (not((tmp_1_fu_261_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_312_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                if ((ap_const_lv1_0 = exitcond_fu_324_p2)) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, exitcond1_fu_312_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond1_fu_312_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, exitcond1_fu_312_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond1_fu_312_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_162_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_162 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_184_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_184 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    ap_sig_196_assign_proc : process(ap_NS_fsm)
    begin
                ap_sig_196 <= (ap_const_lv1_1 = ap_NS_fsm(5 downto 5));
    end process;


    ap_sig_204_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_204 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_211_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_211 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_219_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_219 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_228_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_228 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    ap_sig_236_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_236 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    ap_sig_27_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_27 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_49_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_49 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_58_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_58 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_67_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_67 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_76_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_76 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_228)
    begin
        if (ap_sig_228) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_236)
    begin
        if (ap_sig_236) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_184)
    begin
        if (ap_sig_184) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_27)
    begin
        if (ap_sig_27) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_49)
    begin
        if (ap_sig_49) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_162)
    begin
        if (ap_sig_162) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_58)
    begin
        if (ap_sig_58) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_67)
    begin
        if (ap_sig_67) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_76)
    begin
        if (ap_sig_76) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_204)
    begin
        if (ap_sig_204) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_211)
    begin
        if (ap_sig_211) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_219)
    begin
        if (ap_sig_219) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_nseq_ST_st6_fsm_5_assign_proc : process(ap_sig_196)
    begin
        if (ap_sig_196) then 
            ap_sig_nseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_nseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_312_p2 <= "1" when (p_s_reg_135 = ap_const_lv4_9) else "0";
    exitcond_fu_324_p2 <= "1" when (p_1_reg_146 = ap_const_lv4_8) else "0";
    grp_dog_func_fu_157_ap_start <= ap_reg_grp_dog_func_fu_157_ap_start;
    i_V_fu_318_p2 <= std_logic_vector(unsigned(p_s_reg_135) + unsigned(ap_const_lv4_1));
    j_V_fu_330_p2 <= std_logic_vector(unsigned(p_1_reg_146) + unsigned(ap_const_lv4_1));
    line_delays_rp_V_0_1_fu_253_p3 <= 
        ap_const_lv10_3F8 when (sel_tmp2_fu_223_p2(0) = '1') else 
        line_delays_rp_V_fu_54;
    line_delays_rp_V_1_1_fu_245_p3 <= 
        line_delays_rp_V_1_fu_58 when (sel_tmp2_fu_223_p2(0) = '1') else 
        sel_tmp5_fu_237_p3;
    line_delays_rp_V_2_1_fu_229_p3 <= 
        line_delays_rp_V_2_fu_62 when (sel_tmp2_fu_223_p2(0) = '1') else 
        sel_tmp1_fu_215_p3;
    line_delays_wp_V_1_fu_70 <= ap_const_lv10_0;
    line_delays_wp_V_2_fu_74 <= ap_const_lv10_0;
    line_delays_wp_V_fu_66 <= ap_const_lv10_0;
    out_data_V <= grp_dog_func_fu_157_ap_return_6;

    out_data_V_ap_vld_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            out_data_V_ap_vld <= ap_const_logic_1;
        else 
            out_data_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sel_tmp1_fu_215_p3 <= 
        line_delays_rp_V_2_fu_62 when (sel_tmp_fu_209_p2(0) = '1') else 
        ap_const_lv10_3F8;
    sel_tmp2_fu_223_p2 <= "1" when (tmp_reg_123 = ap_const_lv2_0) else "0";
    sel_tmp5_fu_237_p3 <= 
        ap_const_lv10_3F8 when (sel_tmp_fu_209_p2(0) = '1') else 
        line_delays_rp_V_1_fu_58;
    sel_tmp_fu_209_p2 <= "1" when (tmp_reg_123 = ap_const_lv2_1) else "0";
    tmp_1_fu_261_p2 <= "1" when (tmp_reg_123 = ap_const_lv2_2) else "0";
    tmp_9_fu_170_p2 <= std_logic_vector(unsigned(tmp_reg_123) + unsigned(ap_const_lv2_1));
    tmp_phi_fu_127_p4 <= tmp_reg_123;
end behav;
