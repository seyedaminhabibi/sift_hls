-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dog is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_V_V_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    in_V_V_TVALID : IN STD_LOGIC;
    in_V_V_TREADY : OUT STD_LOGIC;
    out_V_data_V_TDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    out_V_data_V_TVALID : IN STD_LOGIC;
    out_V_data_V_TREADY : OUT STD_LOGIC );
end;


architecture behav of dog is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dog,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xq7z020cl400-1q,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.972375,HLS_SYN_LAT=1246722,HLS_SYN_TPT=none,HLS_SYN_MEM=14,HLS_SYN_DSP=0,HLS_SYN_FF=415,HLS_SYN_LUT=366}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_180 : STD_LOGIC_VECTOR (9 downto 0) := "0110000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv19_4C180 : STD_LOGIC_VECTOR (18 downto 0) := "1001100000110000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_1E0 : STD_LOGIC_VECTOR (8 downto 0) := "111100000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_23 : BOOLEAN;
    signal in_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_42 : BOOLEAN;
    signal exitcond_flatten_reg_619 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_reg_675 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_58 : BOOLEAN;
    signal indvar_flatten_next_fu_456_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal indvar_flatten_next_reg_623 : STD_LOGIC_VECTOR (18 downto 0);
    signal exitcond_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_628 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0178_1_mid2_fu_474_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_0178_1_mid2_reg_633 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_0279_1_mid2_fu_488_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_0279_1_mid2_reg_639 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_mid1_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid1_reg_645 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_650 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_mid2_fu_520_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvars_iv_mid2_reg_655 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_mid2_fu_528_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_mid2_reg_660 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_1_mid2_fu_536_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_1_mid2_reg_665 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_2_mid2_fu_544_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_2_mid2_reg_670 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_mid2_fu_552_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_88 : BOOLEAN;
    signal tmp_8_fu_573_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_reg_744 : STD_LOGIC_VECTOR (9 downto 0);
    signal buffer_0_V_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal buffer_0_V_load_reg_749 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_sig_122 : BOOLEAN;
    signal buffer_1_V_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal buffer_1_V_load_reg_754 : STD_LOGIC_VECTOR (16 downto 0);
    signal buffer_2_V_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal buffer_2_V_load_reg_759 : STD_LOGIC_VECTOR (16 downto 0);
    signal buffer_3_V_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal buffer_3_V_load_reg_764 : STD_LOGIC_VECTOR (16 downto 0);
    signal buffer_4_V_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal buffer_4_V_load_reg_769 : STD_LOGIC_VECTOR (16 downto 0);
    signal buffer_5_V_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal buffer_5_V_load_reg_774 : STD_LOGIC_VECTOR (16 downto 0);
    signal buffer_6_V_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal buffer_6_V_load_reg_779 : STD_LOGIC_VECTOR (16 downto 0);
    signal buffer_7_V_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_s_reg_784 : STD_LOGIC_VECTOR (16 downto 0);
    signal buffer_8_V_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal buffer_8_V_load_reg_789 : STD_LOGIC_VECTOR (16 downto 0);
    signal buffer_9_V_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal buffer_9_V_load_reg_794 : STD_LOGIC_VECTOR (16 downto 0);
    signal buffer_10_V_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal buffer_10_V_load_reg_799 : STD_LOGIC_VECTOR (16 downto 0);
    signal buffer_11_V_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal buffer_11_V_load_reg_804 : STD_LOGIC_VECTOR (16 downto 0);
    signal buffer_12_V_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal buffer_12_V_load_reg_809 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_7_fu_608_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_157 : BOOLEAN;
    signal buffer_0_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal buffer_0_V_ce0 : STD_LOGIC;
    signal buffer_0_V_we0 : STD_LOGIC;
    signal buffer_1_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal buffer_1_V_ce0 : STD_LOGIC;
    signal buffer_1_V_we0 : STD_LOGIC;
    signal buffer_2_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal buffer_2_V_ce0 : STD_LOGIC;
    signal buffer_2_V_we0 : STD_LOGIC;
    signal buffer_3_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal buffer_3_V_ce0 : STD_LOGIC;
    signal buffer_3_V_we0 : STD_LOGIC;
    signal buffer_4_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal buffer_4_V_ce0 : STD_LOGIC;
    signal buffer_4_V_we0 : STD_LOGIC;
    signal buffer_5_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal buffer_5_V_ce0 : STD_LOGIC;
    signal buffer_5_V_we0 : STD_LOGIC;
    signal buffer_6_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal buffer_6_V_ce0 : STD_LOGIC;
    signal buffer_6_V_we0 : STD_LOGIC;
    signal buffer_7_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal buffer_7_V_ce0 : STD_LOGIC;
    signal buffer_7_V_we0 : STD_LOGIC;
    signal buffer_8_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal buffer_8_V_ce0 : STD_LOGIC;
    signal buffer_8_V_we0 : STD_LOGIC;
    signal buffer_9_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal buffer_9_V_ce0 : STD_LOGIC;
    signal buffer_9_V_we0 : STD_LOGIC;
    signal buffer_10_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal buffer_10_V_ce0 : STD_LOGIC;
    signal buffer_10_V_we0 : STD_LOGIC;
    signal buffer_11_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal buffer_11_V_ce0 : STD_LOGIC;
    signal buffer_11_V_we0 : STD_LOGIC;
    signal buffer_12_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal buffer_12_V_ce0 : STD_LOGIC;
    signal buffer_12_V_we0 : STD_LOGIC;
    signal buffer_13_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal buffer_13_V_ce0 : STD_LOGIC;
    signal buffer_13_V_we0 : STD_LOGIC;
    signal indvar_flatten_reg_373 : STD_LOGIC_VECTOR (18 downto 0);
    signal indvars_iv_reg_384 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_s_reg_395 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_1_reg_406 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_2_reg_417 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_0178_1_reg_428 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_0279_1_reg_439 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_557_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_591_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_fu_62 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_V_1_fu_578_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal wp_V_fu_468_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal rp_V_fu_482_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_V_fu_496_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvars_iv_next_dup2_fu_514_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_402 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component dog_buffer_0_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (16 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component dog_buffer_13_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (16 downto 0) );
    end component;



begin
    buffer_0_V_U : component dog_buffer_0_V
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_0_V_address0,
        ce0 => buffer_0_V_ce0,
        we0 => buffer_0_V_we0,
        d0 => tmp_V_fu_62,
        q0 => buffer_0_V_q0);

    buffer_1_V_U : component dog_buffer_0_V
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_1_V_address0,
        ce0 => buffer_1_V_ce0,
        we0 => buffer_1_V_we0,
        d0 => buffer_0_V_load_reg_749,
        q0 => buffer_1_V_q0);

    buffer_2_V_U : component dog_buffer_0_V
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_2_V_address0,
        ce0 => buffer_2_V_ce0,
        we0 => buffer_2_V_we0,
        d0 => buffer_1_V_load_reg_754,
        q0 => buffer_2_V_q0);

    buffer_3_V_U : component dog_buffer_0_V
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_3_V_address0,
        ce0 => buffer_3_V_ce0,
        we0 => buffer_3_V_we0,
        d0 => buffer_2_V_load_reg_759,
        q0 => buffer_3_V_q0);

    buffer_4_V_U : component dog_buffer_0_V
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_4_V_address0,
        ce0 => buffer_4_V_ce0,
        we0 => buffer_4_V_we0,
        d0 => buffer_3_V_load_reg_764,
        q0 => buffer_4_V_q0);

    buffer_5_V_U : component dog_buffer_0_V
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_5_V_address0,
        ce0 => buffer_5_V_ce0,
        we0 => buffer_5_V_we0,
        d0 => buffer_4_V_load_reg_769,
        q0 => buffer_5_V_q0);

    buffer_6_V_U : component dog_buffer_0_V
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_6_V_address0,
        ce0 => buffer_6_V_ce0,
        we0 => buffer_6_V_we0,
        d0 => buffer_5_V_load_reg_774,
        q0 => buffer_6_V_q0);

    buffer_7_V_U : component dog_buffer_0_V
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_7_V_address0,
        ce0 => buffer_7_V_ce0,
        we0 => buffer_7_V_we0,
        d0 => buffer_6_V_load_reg_779,
        q0 => buffer_7_V_q0);

    buffer_8_V_U : component dog_buffer_0_V
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_8_V_address0,
        ce0 => buffer_8_V_ce0,
        we0 => buffer_8_V_we0,
        d0 => p_Val2_s_reg_784,
        q0 => buffer_8_V_q0);

    buffer_9_V_U : component dog_buffer_0_V
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_9_V_address0,
        ce0 => buffer_9_V_ce0,
        we0 => buffer_9_V_we0,
        d0 => buffer_8_V_load_reg_789,
        q0 => buffer_9_V_q0);

    buffer_10_V_U : component dog_buffer_0_V
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_10_V_address0,
        ce0 => buffer_10_V_ce0,
        we0 => buffer_10_V_we0,
        d0 => buffer_9_V_load_reg_794,
        q0 => buffer_10_V_q0);

    buffer_11_V_U : component dog_buffer_0_V
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_11_V_address0,
        ce0 => buffer_11_V_ce0,
        we0 => buffer_11_V_we0,
        d0 => buffer_10_V_load_reg_799,
        q0 => buffer_11_V_q0);

    buffer_12_V_U : component dog_buffer_0_V
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_12_V_address0,
        ce0 => buffer_12_V_ce0,
        we0 => buffer_12_V_we0,
        d0 => buffer_11_V_load_reg_804,
        q0 => buffer_12_V_q0);

    buffer_13_V_U : component dog_buffer_13_V
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_13_V_address0,
        ce0 => buffer_13_V_ce0,
        we0 => buffer_13_V_we0,
        d0 => buffer_12_V_load_reg_809);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    indvar_flatten_reg_373_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_619 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
                indvar_flatten_reg_373 <= indvar_flatten_next_reg_623;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                indvar_flatten_reg_373 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;

    indvars_iv_reg_384_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_619 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
                indvars_iv_reg_384 <= indvars_iv_mid2_reg_655;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                indvars_iv_reg_384 <= ap_const_lv10_280;
            end if; 
        end if;
    end process;

    p_0178_1_reg_428_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_619 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
                p_0178_1_reg_428 <= tmp_7_fu_608_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                p_0178_1_reg_428 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    p_0279_1_reg_439_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_619 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
                p_0279_1_reg_439 <= tmp_8_reg_744;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                p_0279_1_reg_439 <= ap_const_lv10_180;
            end if; 
        end if;
    end process;

    p_1_reg_406_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_619 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
                p_1_reg_406 <= p_1_mid2_reg_665;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                p_1_reg_406 <= ap_const_lv10_180;
            end if; 
        end if;
    end process;

    p_2_reg_417_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_619 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
                p_2_reg_417 <= p_2_mid2_reg_670;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                p_2_reg_417 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    p_s_reg_395_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_619 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
                p_s_reg_395 <= p_mid2_reg_660;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                p_s_reg_395 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond_flatten_reg_619 = ap_const_lv1_0) and not(ap_sig_122))) then
                buffer_0_V_load_reg_749 <= buffer_0_V_q0;
                buffer_10_V_load_reg_799 <= buffer_10_V_q0;
                buffer_11_V_load_reg_804 <= buffer_11_V_q0;
                buffer_12_V_load_reg_809 <= buffer_12_V_q0;
                buffer_1_V_load_reg_754 <= buffer_1_V_q0;
                buffer_2_V_load_reg_759 <= buffer_2_V_q0;
                buffer_3_V_load_reg_764 <= buffer_3_V_q0;
                buffer_4_V_load_reg_769 <= buffer_4_V_q0;
                buffer_5_V_load_reg_774 <= buffer_5_V_q0;
                buffer_6_V_load_reg_779 <= buffer_6_V_q0;
                buffer_8_V_load_reg_789 <= buffer_8_V_q0;
                buffer_9_V_load_reg_794 <= buffer_9_V_q0;
                p_Val2_s_reg_784 <= buffer_7_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                exitcond_flatten_reg_619 <= exitcond_flatten_fu_450_p2;
                indvar_flatten_next_reg_623 <= indvar_flatten_next_fu_456_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond_flatten_fu_450_p2))) then
                exitcond_reg_628 <= exitcond_fu_462_p2;
                indvars_iv_mid2_reg_655 <= indvars_iv_mid2_fu_520_p3;
                p_0178_1_mid2_reg_633 <= p_0178_1_mid2_fu_474_p3;
                p_0279_1_mid2_reg_639 <= p_0279_1_mid2_fu_488_p3;
                p_1_mid2_reg_665 <= p_1_mid2_fu_536_p3;
                p_2_mid2_reg_670 <= p_2_mid2_fu_544_p3;
                p_mid2_reg_660 <= p_mid2_fu_528_p3;
                tmp_mid1_reg_645 <= tmp_mid1_fu_502_p2;
                tmp_reg_650 <= tmp_fu_508_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                tmp_8_reg_744 <= tmp_8_fu_573_p2;
                tmp_mid2_reg_675 <= tmp_mid2_fu_552_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond_flatten_reg_619 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_mid2_reg_675)) and not(ap_sig_122))) then
                tmp_V_fu_62 <= tmp_V_1_fu_578_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_flatten_fu_450_p2, ap_sig_122)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((ap_const_lv1_0 = exitcond_flatten_fu_450_p2)) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                if (not(ap_sig_122)) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_122_assign_proc : process(in_V_V_TVALID, exitcond_flatten_reg_619, tmp_mid2_reg_675)
    begin
                ap_sig_122 <= ((exitcond_flatten_reg_619 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_mid2_reg_675)) and (in_V_V_TVALID = ap_const_logic_0));
    end process;


    ap_sig_157_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_157 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_23_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_23 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_402_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_402 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_42_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_42 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_58_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_58 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_88_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_88 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_23)
    begin
        if (ap_sig_23) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_58)
    begin
        if (ap_sig_58) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_88)
    begin
        if (ap_sig_88) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_42)
    begin
        if (ap_sig_42) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_157)
    begin
        if (ap_sig_157) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_402)
    begin
        if (ap_sig_402) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_0_V_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4, tmp_5_fu_557_p1, tmp_4_fu_591_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            buffer_0_V_address0 <= tmp_4_fu_591_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            buffer_0_V_address0 <= tmp_5_fu_557_p1(10 - 1 downto 0);
        else 
            buffer_0_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    buffer_0_V_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            buffer_0_V_ce0 <= ap_const_logic_1;
        else 
            buffer_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_0_V_we0_assign_proc : process(exitcond_flatten_reg_619, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((((exitcond_flatten_reg_619 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)))) then 
            buffer_0_V_we0 <= ap_const_logic_1;
        else 
            buffer_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_10_V_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4, tmp_5_fu_557_p1, tmp_4_fu_591_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            buffer_10_V_address0 <= tmp_4_fu_591_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            buffer_10_V_address0 <= tmp_5_fu_557_p1(10 - 1 downto 0);
        else 
            buffer_10_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    buffer_10_V_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            buffer_10_V_ce0 <= ap_const_logic_1;
        else 
            buffer_10_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_10_V_we0_assign_proc : process(exitcond_flatten_reg_619, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((((exitcond_flatten_reg_619 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)))) then 
            buffer_10_V_we0 <= ap_const_logic_1;
        else 
            buffer_10_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_11_V_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4, tmp_5_fu_557_p1, tmp_4_fu_591_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            buffer_11_V_address0 <= tmp_4_fu_591_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            buffer_11_V_address0 <= tmp_5_fu_557_p1(10 - 1 downto 0);
        else 
            buffer_11_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    buffer_11_V_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            buffer_11_V_ce0 <= ap_const_logic_1;
        else 
            buffer_11_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_11_V_we0_assign_proc : process(exitcond_flatten_reg_619, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((((exitcond_flatten_reg_619 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)))) then 
            buffer_11_V_we0 <= ap_const_logic_1;
        else 
            buffer_11_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_12_V_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4, tmp_5_fu_557_p1, tmp_4_fu_591_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            buffer_12_V_address0 <= tmp_4_fu_591_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            buffer_12_V_address0 <= tmp_5_fu_557_p1(10 - 1 downto 0);
        else 
            buffer_12_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    buffer_12_V_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            buffer_12_V_ce0 <= ap_const_logic_1;
        else 
            buffer_12_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_12_V_we0_assign_proc : process(exitcond_flatten_reg_619, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((((exitcond_flatten_reg_619 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)))) then 
            buffer_12_V_we0 <= ap_const_logic_1;
        else 
            buffer_12_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_13_V_address0 <= tmp_4_fu_591_p1(10 - 1 downto 0);

    buffer_13_V_ce0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            buffer_13_V_ce0 <= ap_const_logic_1;
        else 
            buffer_13_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_13_V_we0_assign_proc : process(exitcond_flatten_reg_619, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((((exitcond_flatten_reg_619 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)))) then 
            buffer_13_V_we0 <= ap_const_logic_1;
        else 
            buffer_13_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_1_V_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4, tmp_5_fu_557_p1, tmp_4_fu_591_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            buffer_1_V_address0 <= tmp_4_fu_591_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            buffer_1_V_address0 <= tmp_5_fu_557_p1(10 - 1 downto 0);
        else 
            buffer_1_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    buffer_1_V_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            buffer_1_V_ce0 <= ap_const_logic_1;
        else 
            buffer_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_1_V_we0_assign_proc : process(exitcond_flatten_reg_619, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((((exitcond_flatten_reg_619 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)))) then 
            buffer_1_V_we0 <= ap_const_logic_1;
        else 
            buffer_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_2_V_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4, tmp_5_fu_557_p1, tmp_4_fu_591_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            buffer_2_V_address0 <= tmp_4_fu_591_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            buffer_2_V_address0 <= tmp_5_fu_557_p1(10 - 1 downto 0);
        else 
            buffer_2_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    buffer_2_V_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            buffer_2_V_ce0 <= ap_const_logic_1;
        else 
            buffer_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_2_V_we0_assign_proc : process(exitcond_flatten_reg_619, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((((exitcond_flatten_reg_619 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)))) then 
            buffer_2_V_we0 <= ap_const_logic_1;
        else 
            buffer_2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_3_V_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4, tmp_5_fu_557_p1, tmp_4_fu_591_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            buffer_3_V_address0 <= tmp_4_fu_591_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            buffer_3_V_address0 <= tmp_5_fu_557_p1(10 - 1 downto 0);
        else 
            buffer_3_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    buffer_3_V_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            buffer_3_V_ce0 <= ap_const_logic_1;
        else 
            buffer_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_3_V_we0_assign_proc : process(exitcond_flatten_reg_619, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((((exitcond_flatten_reg_619 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)))) then 
            buffer_3_V_we0 <= ap_const_logic_1;
        else 
            buffer_3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_4_V_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4, tmp_5_fu_557_p1, tmp_4_fu_591_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            buffer_4_V_address0 <= tmp_4_fu_591_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            buffer_4_V_address0 <= tmp_5_fu_557_p1(10 - 1 downto 0);
        else 
            buffer_4_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    buffer_4_V_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            buffer_4_V_ce0 <= ap_const_logic_1;
        else 
            buffer_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_4_V_we0_assign_proc : process(exitcond_flatten_reg_619, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((((exitcond_flatten_reg_619 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)))) then 
            buffer_4_V_we0 <= ap_const_logic_1;
        else 
            buffer_4_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_5_V_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4, tmp_5_fu_557_p1, tmp_4_fu_591_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            buffer_5_V_address0 <= tmp_4_fu_591_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            buffer_5_V_address0 <= tmp_5_fu_557_p1(10 - 1 downto 0);
        else 
            buffer_5_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    buffer_5_V_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            buffer_5_V_ce0 <= ap_const_logic_1;
        else 
            buffer_5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_5_V_we0_assign_proc : process(exitcond_flatten_reg_619, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((((exitcond_flatten_reg_619 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)))) then 
            buffer_5_V_we0 <= ap_const_logic_1;
        else 
            buffer_5_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_6_V_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4, tmp_5_fu_557_p1, tmp_4_fu_591_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            buffer_6_V_address0 <= tmp_4_fu_591_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            buffer_6_V_address0 <= tmp_5_fu_557_p1(10 - 1 downto 0);
        else 
            buffer_6_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    buffer_6_V_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            buffer_6_V_ce0 <= ap_const_logic_1;
        else 
            buffer_6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_6_V_we0_assign_proc : process(exitcond_flatten_reg_619, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((((exitcond_flatten_reg_619 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)))) then 
            buffer_6_V_we0 <= ap_const_logic_1;
        else 
            buffer_6_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_7_V_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4, tmp_5_fu_557_p1, tmp_4_fu_591_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            buffer_7_V_address0 <= tmp_4_fu_591_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            buffer_7_V_address0 <= tmp_5_fu_557_p1(10 - 1 downto 0);
        else 
            buffer_7_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    buffer_7_V_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            buffer_7_V_ce0 <= ap_const_logic_1;
        else 
            buffer_7_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_7_V_we0_assign_proc : process(exitcond_flatten_reg_619, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((((exitcond_flatten_reg_619 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)))) then 
            buffer_7_V_we0 <= ap_const_logic_1;
        else 
            buffer_7_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_8_V_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4, tmp_5_fu_557_p1, tmp_4_fu_591_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            buffer_8_V_address0 <= tmp_4_fu_591_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            buffer_8_V_address0 <= tmp_5_fu_557_p1(10 - 1 downto 0);
        else 
            buffer_8_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    buffer_8_V_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            buffer_8_V_ce0 <= ap_const_logic_1;
        else 
            buffer_8_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_8_V_we0_assign_proc : process(exitcond_flatten_reg_619, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((((exitcond_flatten_reg_619 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)))) then 
            buffer_8_V_we0 <= ap_const_logic_1;
        else 
            buffer_8_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_9_V_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4, tmp_5_fu_557_p1, tmp_4_fu_591_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            buffer_9_V_address0 <= tmp_4_fu_591_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            buffer_9_V_address0 <= tmp_5_fu_557_p1(10 - 1 downto 0);
        else 
            buffer_9_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    buffer_9_V_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            buffer_9_V_ce0 <= ap_const_logic_1;
        else 
            buffer_9_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_9_V_we0_assign_proc : process(exitcond_flatten_reg_619, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((((exitcond_flatten_reg_619 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)))) then 
            buffer_9_V_we0 <= ap_const_logic_1;
        else 
            buffer_9_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_flatten_fu_450_p2 <= "1" when (indvar_flatten_reg_373 = ap_const_lv19_4C180) else "0";
    exitcond_fu_462_p2 <= "1" when (p_0178_1_reg_428 = indvars_iv_reg_384) else "0";
    i_V_fu_496_p2 <= std_logic_vector(unsigned(p_2_reg_417) + unsigned(ap_const_lv9_1));

    in_V_V_TDATA_blk_n_assign_proc : process(in_V_V_TVALID, ap_sig_cseq_ST_st4_fsm_3, exitcond_flatten_reg_619, tmp_mid2_reg_675)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond_flatten_reg_619 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_mid2_reg_675)))) then 
            in_V_V_TDATA_blk_n <= in_V_V_TVALID;
        else 
            in_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_V_TREADY_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, exitcond_flatten_reg_619, tmp_mid2_reg_675, ap_sig_122)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond_flatten_reg_619 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_mid2_reg_675)) and not(ap_sig_122))) then 
            in_V_V_TREADY <= ap_const_logic_1;
        else 
            in_V_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_456_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_373) + unsigned(ap_const_lv19_1));
    indvars_iv_mid2_fu_520_p3 <= 
        indvars_iv_next_dup2_fu_514_p2 when (exitcond_fu_462_p2(0) = '1') else 
        indvars_iv_reg_384;
    indvars_iv_next_dup2_fu_514_p2 <= std_logic_vector(unsigned(indvars_iv_reg_384) + unsigned(ap_const_lv10_280));
    out_V_data_V_TREADY <= ap_const_logic_0;
    p_0178_1_mid2_fu_474_p3 <= 
        wp_V_fu_468_p2 when (exitcond_fu_462_p2(0) = '1') else 
        p_0178_1_reg_428;
    p_0279_1_mid2_fu_488_p3 <= 
        rp_V_fu_482_p2 when (exitcond_fu_462_p2(0) = '1') else 
        p_0279_1_reg_439;
    p_1_mid2_fu_536_p3 <= 
        rp_V_fu_482_p2 when (exitcond_fu_462_p2(0) = '1') else 
        p_1_reg_406;
    p_2_mid2_fu_544_p3 <= 
        i_V_fu_496_p2 when (exitcond_fu_462_p2(0) = '1') else 
        p_2_reg_417;
    p_mid2_fu_528_p3 <= 
        wp_V_fu_468_p2 when (exitcond_fu_462_p2(0) = '1') else 
        p_s_reg_395;
    rp_V_fu_482_p2 <= std_logic_vector(unsigned(p_1_reg_406) + unsigned(ap_const_lv10_280));
    tmp_4_fu_591_p1 <= std_logic_vector(resize(unsigned(p_0178_1_mid2_reg_633),64));
    tmp_5_fu_557_p1 <= std_logic_vector(resize(unsigned(p_0279_1_mid2_reg_639),64));
    tmp_7_fu_608_p2 <= std_logic_vector(unsigned(p_0178_1_mid2_reg_633) + unsigned(ap_const_lv10_1));
    tmp_8_fu_573_p2 <= std_logic_vector(unsigned(p_0279_1_mid2_reg_639) + unsigned(ap_const_lv10_1));
    tmp_V_1_fu_578_p1 <= in_V_V_TDATA(17 - 1 downto 0);
    tmp_fu_508_p2 <= "1" when (unsigned(p_2_reg_417) < unsigned(ap_const_lv9_1E0)) else "0";
    tmp_mid1_fu_502_p2 <= "1" when (unsigned(i_V_fu_496_p2) < unsigned(ap_const_lv9_1E0)) else "0";
    tmp_mid2_fu_552_p3 <= 
        tmp_mid1_reg_645 when (exitcond_reg_628(0) = '1') else 
        tmp_reg_650;
    wp_V_fu_468_p2 <= std_logic_vector(unsigned(p_s_reg_395) + unsigned(ap_const_lv10_280));
end behav;
